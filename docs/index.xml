<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>My New Hugo Site</title>
    <link>http://localhost:1313/activitypub_static/</link>
    <description>Recent content on My New Hugo Site</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 09 Aug 2024 16:09:39 +1000</lastBuildDate>
    <atom:link href="http://localhost:1313/activitypub_static/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>ActivityPub Codebase</title>
      <link>http://localhost:1313/activitypub_static/page/extra/activitypub_codebase/</link>
      <pubDate>Fri, 09 Aug 2024 16:09:39 +1000</pubDate>
      <guid>http://localhost:1313/activitypub_static/page/extra/activitypub_codebase/</guid>
      <description>We will be implementing a couple of handler objects for generating activity and sending out request to execute ActivityPub Activity. The codebase will be implemented using Python, it is recommended that you install the following python libraries on your machine or python environment:&#xA;pip install cryptography pip install requests Note Different ActivityPub platforms require varying levels of security for signatures. The algorithm discussed in this section has been tested with Mastodon, Honk, and Ktistec.</description>
    </item>
    <item>
      <title>Getting follow feature</title>
      <link>http://localhost:1313/activitypub_static/page/extra/getting_follow_feature/</link>
      <pubDate>Fri, 09 Aug 2024 15:35:53 +1000</pubDate>
      <guid>http://localhost:1313/activitypub_static/page/extra/getting_follow_feature/</guid>
      <description> See also&#xA;Running ActivityPub Server on Static Site </description>
    </item>
    <item>
      <title>Publish Post Feature</title>
      <link>http://localhost:1313/activitypub_static/page/extra/publish_post_feature/</link>
      <pubDate>Fri, 09 Aug 2024 15:34:24 +1000</pubDate>
      <guid>http://localhost:1313/activitypub_static/page/extra/publish_post_feature/</guid>
      <description>For a post to be visible on another user&amp;rsquo;s instance, a relationship between your static site actor and the other actor is essential. Specifically, you must either follow the other user or have received a follow request from them that you accepted.&#xA;Assuming these conditions are met, you can create a post and share it with your followers or those you follow.&#xA;Example: Simple Python Program to Follow # Assuming the following algorithm is in KeySigningHandler.</description>
    </item>
    <item>
      <title>Following Feature</title>
      <link>http://localhost:1313/activitypub_static/page/extra/following_feature/</link>
      <pubDate>Fri, 09 Aug 2024 15:09:44 +1000</pubDate>
      <guid>http://localhost:1313/activitypub_static/page/extra/following_feature/</guid>
      <description>Before implementing these features, you need to set up your WebFinger and actor object. Additionally, you must implement the required handler objects. For simplicity, weâ€™ll use Python for this implementation. Once you have both the WebFinger and handler objects set up, you can use the following example to send a follow request to another user on ActivityPub instances.&#xA;Example: Simple Python Program to Send a Follow Request # Assuming the signing algorithm is implemented in KeySigningHandler.</description>
    </item>
    <item>
      <title>Running an ActivityPub Server Leveraging Static Web Hosting</title>
      <link>http://localhost:1313/activitypub_static/page/running_activitypub_server_leveraging_static_web_hosting/</link>
      <pubDate>Fri, 09 Aug 2024 10:34:39 +1000</pubDate>
      <guid>http://localhost:1313/activitypub_static/page/running_activitypub_server_leveraging_static_web_hosting/</guid>
      <description>Setting up a minimal ActivityPub-compatible static site involves integrating an ActivityPub server into the static site. The process includes creating a WebFinger file and an actor object, enabling user discovery by other platforms, along with a curated list of features to be implemented.</description>
    </item>
  </channel>
</rss>
